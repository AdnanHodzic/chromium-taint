#!/bin/bash -e

pdf(){
# PDF Viewer installation

# check if libpdf.so already exists
if [ ! -f $FDEST ]
then
	echo -e "-------------------------------------\n"
	echo -e "Chrome PDF Viewer: already installed.\n"
	echo -e "Update/Overwrite?\n"
	read -p "[Y]es, [N]o: " reinst
	

for letter in "$reinst"; do  
  
if [[ "$letter" == [Yy] ]]; 
then
	continue
	
elif [[ "$letter" == [Nn]* ]]; 
then
	echo -e "Skipped ...\n"
	exit

else 
	echo -e "\n--------------------------------\n"
	echo    "Non existing value: exiting ..."
	echo -e "\n--------------------------------\n"
	exit 1
fi

done
fi

# pdf variables
ARCH="$(uname -m)"

# add debian/checker, because
# ubuntu = ../chromium-taint/
# debian = ../chromium/
TDIR="/tmp/chromium-taint/"
CDIR="/usr/lib/chromium-browser"
PDF="/tmp/chromium-taint/opt/google/chrome/libpdf.so"
FDEST="/usr/lib/chromium-browser/libpdf.so"

URL32="https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb"
URL64="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" 

A32="/tmp/chromium-taint/google-chrome-stable_current_i386.deb"
A64="/tmp/chromium-taint/google-chrome-stable_current_amd64.deb"


# pdf installation
echo -e "--------------------------------\n"
echo -e "Installing Chrome PDF Viewer ...\n"
echo -e "--------------------------------\n"

if [ $ARCH == x86_64 ] || [ $ARCH == amd64 ];
then

	echo "64 bit ($ARCH)"
	wget -P $TDIR $URL64
	dpkg -x $A64 $TDIR
	sudo cp $PDF $CDIR
	rm -rf $TDIR

	echo -e "-------------------------------------\n"
	echo -e "Chrome PDF Viewer: installed.\n"
	call	

elif [ $ARCH == i686 ] || [ $ARCH == i386 ];
then
	echo "32 bit ($ARCH)"
	wget -P $TDIR $URL32
	dpkg -x $A32 $TDIR
	sudo cp $PDF $CDIR
	rm -rf $TDIR

	echo -e "-------------------------------------\n"
	echo -e "Chrome PDF Viewer: installed.\n"
	call

else
	echo -e "-----------------------------------\n"
	echo -e	"Exiting: Architecture not supported\n"
	echo -e	"-----------------------------------\n"
	exit 1
fi
}

# Pepper Flash Player installation
pepper(){

flash

# check if pepper is already installed
#if dpkg -s "pepperflashplugin-nonfree" 2> /dev/null 1>/dev/null
#then ...

# pepper installation

echo -e "----------------------------------\n"
echo -e "Installing Pepper Flash Player ...\n"
echo -e "----------------------------------\n"

sudo apt-get -y install pepperflashplugin-nonfree

echo -e "-------------------------------\n"
echo -e "Pepper Flash Player: installed.\n"
call

}

# check if Adobe Flash Plugin is installed
flash(){
if [[ "$(lsb_release -si)" == "Ubuntu" ]]; then
	
	if dpkg -s "flashplugin-installer" | grep "install ok install"  > /dev/null
	then	
		echo -e "\n---------------------------------\n"
		echo -e "Adobe Flash Plugin is installed ..."
		echo -e "Remove to avoid any possible collision between plugins?\n"
		read -p	"[Y]es, [N]o: " pkgrm

		for letter in "$pkgrm"; do
			if [[ "$letter" == [Yy] ]]; then
				sudo apt-get -y remove flashplugin-installer
			fi
		done
		
elif [ "$(lsb_release -si)" == "Debian" ]; then

	if dpkg -s "flashplugin-nonfree" | grep "install ok install"  > /dev/null
	then
		echo -e "\n---------------------------------\n"
		echo -e "Adobe Flash Plugin is installed ..."
		echo -e "Remove to avoid any possible collision between plugins?\n"
		read -p	"[Y]es, [N]o: " pkgrm

		for letter in "$pkgrm"; do
			if [[ "$letter" == [Yy] ]]; then
				sudo apt-get -y remove flashplugin-nonfree
			fi
		done
	fi
fi
fi
}

# fix font rendering (add anti-aliasing)
font(){
username=$(whoami)
NEWFCONF="<?xml version=\"1.0\"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
 <match target=\"font\" >
  <edit mode=\"assign\" name=\"rgba\" >
   <const>none</const>
  </edit>
 </match>
 <match target=\"font\" >
  <edit mode=\"assign\" name=\"hinting\" >
   <bool>true</bool>
  </edit>
 </match>
 <match target=\"font\" >
  <edit mode=\"assign\" name=\"hintstyle\" >
   <const>hintslight</const>
  </edit>
 </match>
 <match target=\"font\" >
  <edit mode=\"assign\" name=\"antialias\" >
   <bool>true</bool>
  </edit>
 </match>
 <match target=\"font\">
  <edit name=\"autohint\" mode=\"assign\">
   <bool>true</bool>
  </edit>
 </match>
</fontconfig>"
FCONF="/home/$username/.fonts.conf"
FCONFBAK="/home/$username/.fonts.conf.backup"

if [ ! -f $FCONF ]
then
    echo -e "-------------------------------------\n"
    echo -e "File .fonts.conf alreay exists \n"
    echo -e "Make backup, and overwrite? \n"
    read -p "[Y]es, [N]o: " fconfreplace

for letter in "$fconfreplace"; do

if [[ "$letter" == [Yy] ]];
then
    cp $FCONF $FCONFBAK
    echo -e "\nBackup stored: $FCONFBAK\n"
    continue
	#read -p "Specify your username: " username
	echo $NEWFCONF > /home/$username/.fonts.conf
	echo "\nFont fixed\n"
	call

elif [[ "$letter" == [Nn]* ]];
then
    echo -e "Skipped ...\n"
	call
    exit

else
    echo -e "\n--------------------------------\n"
    echo -e "Non existing value: exiting ..."
    echo -e "\n--------------------------------\n"
    exit 1
fi

done
fi
}

menu(){
echo -e "\n------------------ Chromium-taint ------------------\n"
read -p "Choose what to install ...
 
[C]hrome PDF Viewer
[P]epper Flash Player
[F]ix font rendering (add Anti-aliasing)
[A]bout \"Chromium-taint\"
[E]xit
:" action
  
for letter in "$action"; do  
  
if [[ "$letter" == [Cc] ]]; then
	
	pdf
	continue

elif [[ "$letter" == [Pp]* ]]; then

	# detect if adobe is installed
	# and ask if you want to remove it
	pepper
	break

elif [[ "$letter" == [Ff]* ]]; then
	
	font

elif [[ "$letter" == [Ee]* ]]; then

	echo -e "\n-------------------------------\n"
	echo    "Ciao!"
	echo -e "\n-------------------------------\n"
	exit

else 
	echo -e "\n--------------------------------\n"
	echo    "Non existing value: exiting ..."
	echo -e "\n--------------------------------\n"
	exit 1

fi

	echo -e "Please restart Chromium.\n"
	echo    "------------------------------\n"
	# exit?
done
}

# menu call
call(){

echo -e "-------------------------------------\n"
echo -e "\nInstall more stuff?\n"
read -p "[Y]es, [N]o: " callresponse

for letter in "$callresponse"; do

if [[ "$letter" == [Yy] ]];
then
	menu
	continue

elif [[ "$letter" == [Nn]* ]];
then
	echo -e "\n-------------------------------\n"
	echo    "Ciao!"
	echo -e "\n-------------------------------\n"
	exit
else
    echo -e "\n--------------------------------\n"
    echo -e "Non existing value: exiting ..."
    echo -e "\n--------------------------------\n"
    exit 1
fi

done
}

menu
